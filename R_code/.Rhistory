pointsize = 1.8,
alpha = 0.8,
palette = cbPalette,
pointshape = 19,
# legend.tittle = "water temp",
# colours = 'adfasf',
show.legend.text = FALSE
)
g.mean.see = g.mean.see + guides(fill = 'none') + labs(title = 'b)')
g.mean.see = g.mean.see + theme(legend.position="none")
g.legend = fviz_pca_ind(z2,
geom.ind = c("point"),
col.ind = as.factor(round(data2$mean.summer,1)),
addEllipses = TRUE,
repel = TRUE,
# legend.tittle = "water temp",
pointsize = 1.8,
alpha = 0.8,
palette = cbPalette,
pointshape = 19,
# legend.tittle = "water temp",
# colours = 'adfasf',
show.legend.text = FALSE
)
g.legend = g.legend + guides(fill = 'none') + labs(title = 'b)', colour= 'Summer See \nTemperature')
legend = g_legend(g.legend)
# g.mean.see$colour = 'aaa'
# g.mean.see$group = 'aaa'
# g.mean.see$col = 'aaa'
library(gridExtra)
# g.mean.see = g.mean.see + guides(fill = 'none') + labs(title = 'b)', colour= 'Summer See \nTemperature')
pdf('/homes/bg33novu/projects/WarmingWebs/paper/figures/Pcas.pdf', width = 28)
grid.arrange(arrangeGrob(g1, g.mean.see, ggplot(), legend, ncol = 4))
dev.off()
t5
library(nlme)
rm(list = ls())
detach(data)
data = read.csv('/homes/bg33novu/projects/WarmingWebs/species_info.csv', header = T)
data = data[!is.na(data$TL), ]
colors = c('blue4', 'dodgerblue3', 'lightskyblue', 'lightseagreen', 'gold', 'darkorange2', 'red')
# change see temperature by avg region pool temperature
data$temp[data$temp == 13] = 11.5
data$temp[data$temp == 16] = 16.4
data$temp[data$temp == 19] = 19.5
data$temp[data$temp == 22] = 22.9
data$temp[data$temp == 26] = 26.3
data$temp[data$temp == 27] = 27.4
data$temp[data$temp == 28] = 28.4
attach(data)
map.colors = function(temp){
col = temp
col[temp == 11.5] = colors[1]
col[temp == 16.4] = colors[2]
col[temp == 19.5] = colors[3]
col[temp == 22.9] = colors[4]
col[temp == 26.3] = colors[5]
col[temp == 27.4] = colors[6]
col[temp == 38.4] = colors[7]
return(col)
}
# jpeg('/homes/bg33novu/projects/WarmingWebs/plots/BM_relationships.jpeg', width = 800, height = 250)
pdf('/homes/bg33novu/projects/WarmingWebs/plots/BM_relationships.pdf', width = 15, height = 9)
layout(matrix(c(1,2,3,4,5,6,7,8), 2,4), widths = c(3,3,3,1.3))
par(mar = c(5, 5, 4, 2) + 0.1)
data2 = data[TL > 1, ]
############33 mass ~ TL
cbPalette <- c('blue4', 'dodgerblue3', 'lightskyblue', 'lightseagreen', 'gold', 'darkorange2', 'red')
# par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
p = plot(log10(data$BM) ~ data$TL, col = adjustcolor(cbPalette, alpha.f = 0.8),
ylab = 'log10 of species BM', xlab = 'species TL', cex = 1, pch = 16, cex.lab = 1.8, cex.axis = 1.4, ann = FALSE)
# legend('topright', 'C', bty = 'n', cex = 2)
coefsB.TL = c()
comp = 0
for (i in unique(data$temp)){
comp = comp + 1
cat(i, '\n')
abline(lm(log10(data$BM[data$temp == i]) ~ data$TL[data$temp == i]), col = cbPalette[comp])
coefsB.TL =c(coefsB.TL, summary(lm(log10(data$BM[data$temp == i]) ~ data$TL[data$temp == i]))$coefficients[2])
}
abline(lm(log10(data$BM) ~ data$TL), lwd = 4)
mtext(side = 1, text = "species TL", line = 3, cex = 1.8)
mtext(side = 2, text = "log10 of species BM", line = 2.5, cex = 1.8)
p = plot(log10(data$BM) ~ data$TL, col = adjustcolor(cbPalette, alpha.f = 0.8),
ylab = 'log10 of species BM', xlab = 'species TL', cex = 1, pch = 16, cex.lab = 1.8, cex.axis = 1.4, ann = FALSE)
# legend('topright', 'C', bty = 'n', cex = 2)
coefsB.TL = c()
comp = 0
for (i in unique(data$temp)){
comp = comp + 1
cat(i, '\n')
abline(lm(log10(data$BM[data$temp == i]) ~ data$TL[data$temp == i]), col = cbPalette[comp])
coefsB.TL =c(coefsB.TL, summary(lm(log10(data$BM[data$temp == i]) ~ data$TL[data$temp == i]))$coefficients[2])
}
abline(lm(log10(data$BM) ~ data$TL), lwd = 4)
mtext(side = 1, text = "species TL", line = 3, cex = 1.8)
mtext(side = 2, text = "log10 of species BM", line = 2.5, cex = 1.8)
dev.off()
dev.off()
p = plot(log10(data$BM) ~ data$TL, col = adjustcolor(cbPalette, alpha.f = 0.8),
ylab = 'log10 of species BM', xlab = 'species TL', cex = 1, pch = 16, cex.lab = 1.8, cex.axis = 1.4, ann = FALSE)
# legend('topright', 'C', bty = 'n', cex = 2)
coefsB.TL = c()
comp = 0
for (i in unique(data$temp)){
comp = comp + 1
cat(i, '\n')
abline(lm(log10(data$BM[data$temp == i]) ~ data$TL[data$temp == i]), col = cbPalette[comp])
coefsB.TL =c(coefsB.TL, summary(lm(log10(data$BM[data$temp == i]) ~ data$TL[data$temp == i]))$coefficients[2])
}
abline(lm(log10(data$BM) ~ data$TL), lwd = 4)
mtext(side = 1, text = "species TL", line = 3, cex = 1.8)
mtext(side = 2, text = "log10 of species BM", line = 2.5, cex = 1.8)
model = lme(log10(BM) ~ TL * temp, random = ~1|name, data = data)
model3 =lme(log10(BM) ~ TL , random = ~1|name, data = data)
BIC(model)
BIC(model3)
anova(model)
summary(model)
model2 =lme(log10(BM) ~ TL + temp, random = ~1|name, data = data)
BIC(model2)
BIC(model3)
anova(model3)
rm(list = ls())
colors = c('blue4', 'dodgerblue1', 'cyan', 'green', 'gold', 'darkorange2', 'red')
map.colors = function(temp){
col = temp
col[temp == 13] = colors[1]
col[temp == 16] = colors[2]
col[temp == 19] = colors[3]
col[temp == 22] = colors[4]
col[temp == 26] = colors[5]
col[temp == 27] = colors[6]
col[temp == 28] = colors[7]
return(col)
}
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
library(factoextra)
library(FactoMineR)
library(ade4)
library(measurements)
rm(list = ls())
library(ggplot2)
library(gridExtra)
library(viridis)
library("grid")
do.plot = function(df, title){
experimentals = ggplot(df,
aes(x=temperature, y=persistence, group = as.factor(mean.temp), fill = as.factor(mean.temp), colour = as.factor(mean.temp)),
)+
stat_summary(geom="point", fun.y=mean, cex = 0.8)+
geom_smooth( alpha=0.2, cex = 0.3) +
scale_fill_viridis_d(option = "plasma", name = paste('Average \nsummer temp.'))+
scale_color_viridis_d(option = "plasma", name = paste('Average \nsummer temp.'))+
theme_classic()+
ggtitle(title)+
theme(
plot.title = element_text(size = 14, hjust = 0),
# axis.title.x=element_blank(),
# axis.text.x=element_blank(),
axis.text.y = element_text(size = 8),
axis.title.y = element_text(size = 10),
legend.position = 'bottom',
plot.margin = unit(c(1.5,0.1,0.1,1), "cm"),
)
return(experimentals)
}
prepare_tab = function(tab.exp){
names(tab.exp) = c('name', 'region', 'init_temp', 'richness', 'temperature', 'nb_ext_nn_basal', 'nb_ext', 'resilience', 'oi', 'tl', 'connectance')
tab.exp$region = sub("u'", "", tab.exp$region)
tab.exp$region = sub("'", "", tab.exp$region)
tab.exp$region = sub(" ", "", tab.exp$region)
tab.exp$prop_ext = 1 - tab.exp$nb_ext/tab.exp$richness
tab.exp$mean.temp = round(ave(tab.exp$init_temp, tab.exp$region, FUN = mean, na.rm = TRUE), 1)
seetemps = read.table('~/projects/WarmingWebs/R_code2/see_temps', header = T, sep = ',')
tab.exp$mean.summer = NA
for (name in seetemps$name){
cat(name, '\n')
xx = grep(pattern = name, x = tab.exp$name, fixed = TRUE)
tab.exp$mean.summer[grep(pattern = name, x = tab.exp$name, fixed = TRUE)] = round(seetemps$MeanSummer[seetemps$name == name],1)
}
temp_incr = tab.exp$temperature - tab.exp$init_temp
temps = unique(tab.exp$init_temp)
warming = unique(tab.exp$temp_incr)
netws = unique(tab.exp$name)
max.min = c(NA, NA, NA)
for  (nom in unique(tab.exp$name)){
aaa = tab.exp[tab.exp$name == nom, ]
aaa = aaa[aaa$temperature <=50, ]
res = c(unique(aaa$init_temp), unique(aaa$mean.temp), max(aaa$prop_ext) - min(aaa$prop_ext))
max.min = rbind(max.min, res)
}
# cbPalette <- c('blue4', 'dodgerblue3', 'lightskyblue', 'lightseagreen', 'gold', 'darkorange2', 'red')
df = data.frame(persistence = tab.exp$prop_ext, temperature = tab.exp$temperature, init_temp = tab.exp$mean.summer, mean.temp = tab.exp$mean.summer)
df = df[df$temperature <=50, ]
return(df)
}
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
# tab.exp = read.csv('/homes/bg33novu/projects/WarmingWebs/WarmingHPC/outputs/experimentalfinals.csv', header = F)
tab.exp = read.csv('/home/bg33novu/projects/WarmingWebs/WarmingHPC/outputs/experimentals_K5.csv', header = F)
df1.2 = prepare_tab(tab.exp1.2)
df1.8 = prepare_tab(tab.exp1.8)
df1.5 = prepare_tab(tab.exp)
p1.2 = do.plot(df1.2, 'q = 1.2')
p1.8 = do.plot(df1.8, 'q = 1.8')
p1.5 = do.plot(df1.5, 'q = 1.5')
legend = g_legend(p1.2)
p1.2 = p1.2 + theme(legend.position="none")
p1.8 = p1.8 + theme(legend.position="none")
p1.5 = p1.5 + theme(legend.position="none")
rm(list = ls())
library(ggplot2)
library(gridExtra)
library(viridis)
library("grid")
do.plot = function(df, title){
experimentals = ggplot(df,
aes(x=temperature, y=persistence, group = as.factor(mean.temp), fill = as.factor(mean.temp), colour = as.factor(mean.temp)),
)+
stat_summary(geom="point", fun.y=mean, cex = 0.8)+
geom_smooth( alpha=0.2, cex = 0.3) +
scale_fill_viridis_d(option = "plasma", name = paste('Average \nsummer temp.'))+
scale_color_viridis_d(option = "plasma", name = paste('Average \nsummer temp.'))+
theme_classic()+
ggtitle(title)+
theme(
plot.title = element_text(size = 14, hjust = 0),
# axis.title.x=element_blank(),
# axis.text.x=element_blank(),
axis.text.y = element_text(size = 8),
axis.title.y = element_text(size = 10),
legend.position = 'bottom',
plot.margin = unit(c(1.5,0.1,0.1,1), "cm"),
)
return(experimentals)
}
prepare_tab = function(tab.exp){
names(tab.exp) = c('name', 'region', 'init_temp', 'richness', 'temperature', 'nb_ext_nn_basal', 'nb_ext', 'resilience', 'oi', 'tl', 'connectance')
tab.exp$region = sub("u'", "", tab.exp$region)
tab.exp$region = sub("'", "", tab.exp$region)
tab.exp$region = sub(" ", "", tab.exp$region)
tab.exp$prop_ext = 1 - tab.exp$nb_ext/tab.exp$richness
tab.exp$mean.temp = round(ave(tab.exp$init_temp, tab.exp$region, FUN = mean, na.rm = TRUE), 1)
seetemps = read.table('~/projects/WarmingWebs/R_code2/see_temps', header = T, sep = ',')
tab.exp$mean.summer = NA
for (name in seetemps$name){
cat(name, '\n')
xx = grep(pattern = name, x = tab.exp$name, fixed = TRUE)
tab.exp$mean.summer[grep(pattern = name, x = tab.exp$name, fixed = TRUE)] = round(seetemps$MeanSummer[seetemps$name == name],1)
}
temp_incr = tab.exp$temperature - tab.exp$init_temp
temps = unique(tab.exp$init_temp)
warming = unique(tab.exp$temp_incr)
netws = unique(tab.exp$name)
max.min = c(NA, NA, NA)
for  (nom in unique(tab.exp$name)){
aaa = tab.exp[tab.exp$name == nom, ]
aaa = aaa[aaa$temperature <=50, ]
res = c(unique(aaa$init_temp), unique(aaa$mean.temp), max(aaa$prop_ext) - min(aaa$prop_ext))
max.min = rbind(max.min, res)
}
# cbPalette <- c('blue4', 'dodgerblue3', 'lightskyblue', 'lightseagreen', 'gold', 'darkorange2', 'red')
df = data.frame(persistence = tab.exp$prop_ext, temperature = tab.exp$temperature, init_temp = tab.exp$mean.summer, mean.temp = tab.exp$mean.summer)
df = df[df$temperature <=50, ]
return(df)
}
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
# tab.exp = read.csv('/homes/bg33novu/projects/WarmingWebs/WarmingHPC/outputs/experimentalfinals.csv', header = F)
tab.exp = read.csv('/home/bg33novu/projects/WarmingWebs/WarmingHPC/outputs/experimentals_K5.csv', header = F)
tab.exp1.2 =  read.csv('/home/bg33novu/projects/WarmingWebs/WarmingHPC/outputs/experimentals_K5_h1.2.csv', header = F)
tab.exp1.8 =  read.csv('/home/bg33novu/projects/WarmingWebs/WarmingHPC/outputs/experimentals_K5_h1.8.csv', header = F)
df1.2 = prepare_tab(tab.exp1.2)
df1.8 = prepare_tab(tab.exp1.8)
df1.5 = prepare_tab(tab.exp)
p1.2 = do.plot(df1.2, 'q = 1.2')
p1.8 = do.plot(df1.8, 'q = 1.8')
p1.5 = do.plot(df1.5, 'q = 1.5')
legend = g_legend(p1.2)
p1.2 = p1.2 + theme(legend.position="none")
p1.8 = p1.8 + theme(legend.position="none")
p1.5 = p1.5 + theme(legend.position="none")
p1.5
p1.8
pdf('~/projects/WarmingWebs/paper/figures/effect_of_q.pdf', width = 15)
grid.arrange(p1.2, p1.5, p1.8, legend, layout_matrix = rbind(c(1,2,3), c(4)), heights = c(5,1))
dev.off()
rm(list = ls())
library(nlme)
detach(tab)
library(ggplot2)
library(measurements)
library(RColorBrewer)
library(viridis)
library("ggsci")
library(car)
error.bars<-function(x,y,xbar,ybar, coul)
{arrows(x,y-ybar,x,y+ybar,code=3,angle=90,length=0.05, col=coul)
#arrows(x-xbar,y,x+xbar,y,code=3,angle=90,length=0.05, col=coul)
}
mmToInches = function(x){
return(x/25.4)
}
tab = read.csv('/home/bg33novu/projects/WarmingWebs/WarmingHPC/outputs/warming_exp_k5.csv', header = FALSE)
names(tab) = c('name', 'region', 'repl', 'depth', 'area', 'tempsee', 'init_temp', 'richness', 'warming', 'nb_ext_nn_basal', 'nb_ext', 'resilience', 'oi', 'tl', 'connectance')
tab$prop_ext = 1 - tab$nb_ext/tab$richness
tab$mean.temp = round(ave(tab$init_temp, tab$region, FUN = mean), 1)
radius2 = tab$area / pi
tab$size = (1/6) * pi * tab$depth *(3*radius2 + tab$depth*tab$depth)
latitude = tab$tempsee
latitude[grepl('Portugal_txt', tab$name)] = '38 42 38'
latitude[grepl('Canada_txt/PP', tab$name)] = '48 29 33'
latitude[grepl('Canada_txt/SF', tab$name)] = '48 36 43'
latitude[grepl('England_txt/MB', tab$name)] = '50 21 24'
latitude[grepl('England_txt/W', tab$name)] = '50 19 00'
latitude[grepl('Portugal_txt/CR', tab$name)] = '38 42 38'
latitude[grepl('Portugal_txt/RV', tab$name)] = '39 17 11'
latitude[grepl('Mad_txt/PC', tab$name)] = '32 46 32'
latitude[grepl('Mad_txt/RM', tab$name)] = '32 38 44'
latitude[grepl('Mad_txt/RM', tab$name)] = '32 38 44'
latitude[grepl('Brasil\\(SP\\)_txt/', tab$name)] = '-23 35 00'
latitude[grepl('Brasil\\(CE\\)_txt/FX', tab$name)] = '3 13 04'
latitude[grepl('Brasil\\(CE\\)_txt/GJ', tab$name)] = '3 14 14'
latitude[grepl('Moz_txt', tab$name)] = '-25 58 36'
unique(cbind.data.frame(tab$name, latitude))
latitude2 = as.numeric(conv_unit(latitude, "deg_min_sec", "dec_deg"))
latitude2[grepl('Portugal_txt/L1', tab$name)] = 39.1508
latitude2[grepl('Portugal_txt/L2', tab$name)] = 39.1508
latitude2[grepl('Portugal_txt/L3', tab$name)] = 39.245223
latitude2[grepl('Portugal_txt/L4', tab$name)] = 39.245223
tab$latitude = latitude2
latitude3 = ave(latitude2, tab$region, FUN = mean)
tab$latitudem = latitude3
rm(latitude)
attach(tab)
inits = unique(init_temp)
warm = unique(warming)
netws = unique(name)
#### reading info about topology and environment######
data = read.csv('/home/bg33novu/projects/WarmingWebs/results/network_topologies.csv', header = T)
names(data) = c("name", "temp_sea", "temp", "area", "detph" ,"elevation", "Nb species", "Nb links", "Connectance", "Mean omnivory",
"PredPreyRatio", "Mean generalism", "% basal", "%intermediate", "%top", "Mean TL", "Mean TL top species", "Avg path length" )
library(ggplot2)
head(data)
# size = data$area*data$detph
# considering pools as spherical caps:
radius2 = data$area / pi
size = (1/6) * pi * data$detph *(3*radius2 + data$detph*data$detph)
data$min.sea.temp = NA
data$max.sea.temp = NA
data$mean.sea.temp = NA
data$mean.summer = NA
data$min.summer = NA
data$max.summer = NA
seetemps = read.table('~/projects/WarmingWebs/R_code2/see_temps', header = T, sep = ',')
for (name in seetemps$name){
cat(name, '\n')
xx = grep(pattern = name, x = data$name, fixed = TRUE)
data$min.sea.temp[xx] = seetemps$Min[seetemps$name == name]
data$max.sea.temp[grep(pattern = name, x = data$name, fixed = TRUE)] = seetemps$Max[seetemps$name == name]
data$mean.sea.temp[grep(pattern = name, x = data$name, fixed = TRUE)] = seetemps$Mean[seetemps$name == name]
data$mean.summer[grep(pattern = name, x = data$name, fixed = TRUE)] = seetemps$MeanSummer[seetemps$name == name]
data$min.summer[grep(pattern = name, x = data$name, fixed = TRUE)] = seetemps$MaxSummer[seetemps$name == name]
data$max.summer[grep(pattern = name, x = data$name, fixed = TRUE)] = seetemps$MinSummer[seetemps$name == name]
}
data$amplitude = data$max.sea.temp - data$min.sea.temp
#### doing correspondences between the two dataframes ########
tab$name = gsub('/web2.txt', '', tab$name)
tab$name = gsub("\\[u'", '', tab$name)
tab$name = gsub("'", '', tab$name)
data$name[1]
which(tab$name == data$name[1])
tab$name[which(tab$name == data$name[1])]
tab$name[1]
names(tab)
tab = merge(tab, data[,c(1,6,25)])
detach(tab)
attach(tab)
# length(names(data))
#####################################################
tab.init = tab.init = tab[tab$warming == 0, ]
plot(tab.init$prop_ext ~ tab.init$init_temp, ylab = "Persistence", xlab = "Initial web temperature")
lines(tapply(tab.init$prop_ext, tab.init$init_temp, mean) ~ sort(inits))
tapply(tab.init$prop_ext, tab.init$mean.temp, mean)
plot(tab.init$prop_ext ~ tab.init$tempsee, xlab = "Persistence", ylab = "local sea temperature")
points(as.numeric(names(tapply(tab.init$prop_ext, tab.init$tempsee, mean))), tapply(tab.init$prop_ext, tab.init$tempsee, mean), col = 'red', pch = 16)
boxplot(tab.init$prop_ext ~ tab.init$tempsee, new = TRUE)
# make logit transformation as between 0 and 1
library(car)
library(MASS)
library(nlme)
library(tidyr)
logit_prop = logit(prop_ext)
tab$logit_prop = logit_prop
tab.init = tab.init = tab[tab$temp_incr == 0, ]
TLs = tapply(tab.init$TL, sort(tab.init$temp), mean, na.rm = TRUE)
ois = tapply(tab.init$oi, sort(tab.init$temp), mean, na.rm = TRUE)
Cs = tapply(tab.init$C, sort(tab.init$temp), mean)
Ls = nb_s * nb_s * Cs
plot(slopes ~ sort(temps), col = colors)
logit.prop_ext = logit(tab$prop_ext)
# first define a variable for beach:
tab$beach = gsub("u'", "", tab$repl)
tab$beach = gsub("'", "", tab$beach)
unique(tab$beach)
unique(cbind.data.frame(tab$region, tab$beach))
tab$beach = gsub("\\d+$", "", tab$beach)
# unique(tab$beach)
tab$beach[grep("PP+", tab$beach)] = "PP"
tab$beach[grep("SF+", tab$beach)] = "SF"
# unique(tab$beach)
# unique(cbind.data.frame(tab$region, tab$beach))
# tab$beach[grepl('FX', tab$beach)]
random_model = ~ warming |region/beach/name   # need to change the control here
random_model = ~ 1 | region/beach/name
random_model = ~ 1 | name
model.elev = lme(logit.prop_ext ~ amplitude + elevation + size + abs(latitude) + tempsee*warming, random = random_model, data = tab)
model.elev = lme(logit.prop_ext ~ amplitude + elevation + size + abs(latitude) + tempsee*warming, random = random_model, data = tab)
B.c = BIC(model.elev)
# stepAIC(model.elev)
# minus one variable
model.s = lme(logit.prop_ext ~ amplitude + elevation + abs(latitude) + tempsee*warming, random = random_model, data = tab)
B.s = BIC(model.s)
model.l = lme(logit.prop_ext ~ amplitude + elevation + size + tempsee*warming, random = random_model, data = tab)
B.l = BIC(model.l)
model.a = lme(logit.prop_ext ~ elevation + size + abs(latitude) + tempsee*warming, random = random_model, data = tab)
B.a = BIC(model.a)
# minus 2
model.ae = lme(logit.prop_ext ~ size + abs(latitude) + tempsee*warming, random = random_model, data = tab)
B.ae = BIC(model.ae)
model.as = lme(logit.prop_ext ~ elevation + abs(latitude) + tempsee*warming, random = random_model, data = tab)
B.as = BIC(model.as)
model.al = lme(logit.prop_ext ~ elevation + size + tempsee*warming, random = random_model, data = tab)
B.al = BIC(model.al)
model.es = lme(logit.prop_ext ~ amplitude + abs(latitude) + tempsee*warming, random = random_model, data = tab)
B.es = BIC(model.es)
model.el = lme(logit.prop_ext ~ amplitude + size + tempsee*warming, random = random_model, data = tab)
B.el = BIC(model.el)
model.sl = lme(logit.prop_ext ~ amplitude + elevation + tempsee*warming, random = random_model, data = tab)
B.sl = BIC(model.sl)
# minus3
model.aes = lme(logit.prop_ext ~ abs(latitude) + tempsee*warming, random = random_model, data = tab)  #  <===========
B.aes = BIC(model.aes)
model.ael = lme(logit.prop_ext ~ size + tempsee*warming, random = random_model, data = tab)
B.ael = BIC(model.ael)
model.esl = lme(logit.prop_ext ~ amplitude + tempsee*warming, random = random_model, data = tab)
B.esl = BIC(model.esl)
#minus4
model.aesl = lme(logit.prop_ext ~ tempsee*warming, random = random_model, data = tab)
B.aesl = BIC(model.aesl)
BIC(lme(logit.prop_ext ~ abs(latitude)*tempsee*warming, random = random_model, data = tab))
# without interaction:
model.add = lme(logit.prop_ext ~ tempsee+warming, random = random_model, data = tab)
B.add = BIC(model.add)
model.w = lme(logit.prop_ext ~ warming, random = random_model, data = tab)
B.w = BIC(model.w)
xx = rbind(c('B.c', 'B.s', 'B.l', 'B.a', 'B.ae', 'B.as', 'B.al', 'B.es', 'B.el', 'B.sl', 'B.aes', 'B.ael', 'B.esl', 'B.aesl'),
c(B.c, B.s, B.l, B.a, B.ae, B.as, B.al, B.es, B.el, B.sl, B.aes, B.ael, B.esl, B.aesl))
xx[2, ] = round(as.numeric(xx[2, ]), 2)
# stepAIC(model.elev)
anova(model.aesl)
summary(model.aesl)
BIC(model.elev)
AIC(model.aesl)
output = function(){
stats = function(){
# print(as.character(unique(subtab$region)))
if (min(subtab$prop_ext) < 1){
x = lme(logit_prop ~ warming, random = random_model, data = subtab)
return(c(anova(x)$`F-value`[2], anova(x)$`p-value`[2], summary(x)$tTable[2,1]))
}else{
return(c(NA, NA))
}
}
i = 0
cat('region \t mean_temp \t Fvalue \t pvalue \t coeff\n')
for (temp in sort(unique(tempsee))){
i = i + 1
subtab = tab[tab$tempsee == temp,]
subtab$logit_prop = logit(prop_ext[tab$tempsee == temp])
# cat(unique(subtab$mean.temp), '\t')
res = tryCatch(stats(), error = function(e)
return(NA)
)
cat(substr(as.character(unique(subtab$region)), 3, 12), '\t', unique(subtab$tempsee), '\t', res[1], '\t', res[2], '\t', res[3], '\n' )
}
}
library(stringr)
random_model = ~ 1 | beach/name
results.stats = as.data.frame(capture.output(output()), col.names = F)
results.stats = results.stats %>% separate('capture.output(output())',
c('region', 'mean_temp', 'Fvalue', 'pvalue', 'coeff'),
sep = '\t')
results.stats = results.stats[-1,]
results.stats
plot(results.stats$coeff ~ results.stats$mean_temp, xlab = "Local see temperature", ylab = "slope of the persistence to warming regression")
summary(lm(results.stats$coeff ~ as.numeric(results.stats$mean_temp)))
plot(results.stats$coeff ~ results.stats$mean_temp, xlab = "Local sea temperature", ylab = "slope of the persistence to warming regression")
